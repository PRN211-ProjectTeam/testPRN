@*<div id="list"></div>
<div id="pagination"></div>*@

<p><a asp-area="" asp-controller="Home" asp-action="Login">Login</a></p>
<ul>
    @if (Context.User.Identity.IsAuthenticated)
    {
        <li>
            <a>Hello @User.Identity.Name</a>
        </li>
        <li>
            <a asp-controller="Home" asp-action="Logout">Logout</a>
        </li>
    }
</ul>

<script>
    const itemsPerPage = 10; // Số lượng mục hiển thị trên mỗi trang
    const data = []; // Danh sách dữ liệu

    function showPage(pageNumber, data) {
        const start = (pageNumber - 1) * itemsPerPage; // Vị trí bắt đầu của trang hiện tại
        const end = start + itemsPerPage; // Vị trí kết thúc của trang hiện tại
        const pageData = data.slice(start, end); // Lấy ra danh sách dữ liệu của trang hiện tại

        const list = document.getElementById("list");
        list.innerHTML = ""; // Xóa nội dung cũ
        for (let i = 0; i < pageData.length; i++) {
            const item = document.createElement("div");
            item.innerHTML = pageData[i];
            list.appendChild(item); // Thêm các mục vào danh sách hiển thị
        }

        const totalPages = Math.ceil(data.length / itemsPerPage); // Tổng số trang
        const pagination = document.getElementById("pagination");
        pagination.innerHTML = ""; // Xóa nội dung cũ
        for (let i = 1; i <= totalPages; i++) {
            const pageLink = document.createElement("a");
            pageLink.href = "#";
            pageLink.innerHTML = i;
            if (i === pageNumber) {
                pageLink.classList.add("active"); // Đánh dấu trang hiện tại
            }
            pageLink.addEventListener("click", (event) => {
                event.preventDefault(); // Ngăn chặn chuyển hướng đến trang khác
                showPage(i, data); // Hiển thị trang mới
            });
            pagination.appendChild(pageLink); // Thêm các nút phân trang vào phân trang
        }
    }

    showPage(1, data); // Hiển thị trang đầu tiên khi tải trang
</script>